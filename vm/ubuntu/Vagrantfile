# -*- mode: ruby -*- 
Vagrant.configure("2") do |config|
  config.vm.box_check_update = true
  config.vm.provider "virtualbox" do |v| 
    v.customize ["setextradata", :id, "VBoxInternal/CPUM/SSE4.1", "1"]
    v.customize ["setextradata", :id, "VBoxInternal/CPUM/SSE4.2", "1"]

    # This can be used to add and set nic2:
    #v.customize ["modifyvm", :id, "--nic2", "hostonly", "--hostonlyadapter2",
    #   "vboxnet0", "--nicpromisc2", "allow-all"]

    v.memory = "4096"
    v.cpus = 3 
  end 
  # This can be used to add bridge NIC - update 'wlo1' to your interface:
  config.vm.network "public_network", bridge: "wlo1"

  config.vm.network "forwarded_port", guest: 8080, host: 8080, host_ip: "127.0.0.1"

  config.vm.synced_folder "../../notebook/", "/notebook", type: "rsync"

  config.vm.define "ubuntu" do |m| 
    m.vm.box = "ubuntu/jammy64"

    m.vm.provision "shell", inline: <<-SHELL
      echo "Install dependencies..."
      apt update
      apt -y install build-essential autoconf libtool libssl-dev libatomic1 \
        libxml2-dev libpcap-dev dpdk dpdk-dev linux-image-extra-virtual git

      echo "Install NEMEA (for ipfixprobe unirec output)..."
      (
         git clone https://github.com/cesnet/nemea-framework
         cd nemea-framework
         ./bootstrap.sh && ./configure --prefix=/usr -q && make install -j5
      )

      echo "Install dependencies for python notebook..."
      apt -y install python3-dev python3-pip python-is-python3
      (
        cd nemea-framework/pytrap
        python3 setup.py install
        pip3 install -r /notebook/requirements.txt
        mkdir -p /usr/share/GeoIP
        wget -q -O /usr/share/GeoIP/GeoLite2-City.mmdb https://github.com/P3TERX/GeoLite.mmdb/raw/download/GeoLite2-City.mmdb
      )

      echo "Install ipfixprobe with NEMEA and DPDK..."
      (
         git clone https://github.com/cesnet/ipfixprobe
         cd ipfixprobe && autoreconf -i && ./configure -q --prefix=/usr --with-dpdk --with-nemea && make -j5 install
      )

      echo "pci 0000:00:08.0 uio_pci_generic" >> /etc/dpdk/interfaces
      systemctl enable --now dpdk.service
    SHELL

    m.vm.provision 'shell', reboot: true

    m.vm.provision "shell", inline: <<-SHELL
      dpdk-hugepages.py --setup 1G
      echo "To start jupyter notebook server, run: cd /notebook; python -m notebook --ServerApp.ip=0.0.0.0 --port 8080" >&2
    SHELL
  end
end

